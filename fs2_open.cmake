
include(libcode.cmake)

list(APPEND fs2_open_SOURCES
	code/freespace2/freespace.cpp
	code/freespace2/freespace.h
	code/freespace2/freespace.rc
	code/freespace2/freespaceresource.h
	code/freespace2/levelpaging.cpp
	code/freespace2/levelpaging.h
	code/lab/lab.cpp
	code/lab/lab.h
	code/lab/wmcgui.cpp
	code/lab/wmcgui.h
)

add_executable(fs2_open WIN32 ${fs2_open_SOURCES} ${libcode_SOURCES})
build_solution_tree(fs2_open)

list(APPEND fs2_open_INCLUDE_DIRECTORIES
	${PROJECT_SOURCE_DIR}/code
	${JPEG_INCLUDE_DIR}
	${LUA_INCLUDE_DIR}
	${OGG_INCLUDE_DIRS}
	${OPENAL_INCLUDE_DIR}
	${PNG_INCLUDE_DIR}
	${OPENGL_INCLUDE_DIR}
	${THEROA_INCLUDE_DIRS}
	${VORBISFILE_INCLUDE_DIRS}
	${VORBIS_INCLUDE_DIRS}
	${ZLIB_INCLUDE_DIR}
)

if(UNIX)
	list(APPEND fs2_open_DEFINES
		SCP_UNIX
		LUA_USE_LINUX
	)
	list(APPEND fs2_open_INCLUDE_DIRECTORIES
		${JANSSON_INCLUDE_DIRS}
		${MONGOOSE_INCLUDE_DIR}
		${SDL_INCLUDE_DIR}
	)
	list(APPEND fs2_open_LINK_LIBRARIES
		mongoose
		${JANSSON_LIBRARIES}
		${OGG_LIBRARIES}
		${THEORA_LIBRARIES}
		${VORBISFILE_LIBRARIES}
		${VORBIS_LIBRARIES}
 		${JPEG_LIBRARY}
 		${LUA_LIBRARY}
 		${OPENAL_LIBRARY}
 		${OPENGL_LIBRARY}
 		${PNG_LIBRARY}
 		${SDL_LIBRARY}
	)
	list(REMOVE_DUPLICATES fs2_open_LINK_LIBRARIES)
endif(UNIX)

if(MSVC)
	list(APPEND fs2_open_DEFINES
		_WINDOWS
		WIN32
		_CRT_SECURE_NO_DEPRECATE
		_CRT_SECURE_NO_WARNINGS
		_SECURE_SCL=0
		USE_OPENAL
	)
	list(APPEND fs2_open_LINK_LIBRARIES
		ogg
		vorbis
		vorbisfile
		theora
		zlib
		png
		lua
		jpeg
		openal
		${FSO_DIRECTX_LIBRARIRES}
		${FSO_WINDOWS_LIBRARIRES}
	)
endif()

target_include_directories(fs2_open PUBLIC ${fs2_open_INCLUDE_DIRECTORIES})
target_link_libraries(fs2_open ${fs2_open_LINK_LIBRARIES} ${CMAKE_DL_LIBS})

get_property(DEBUG_CONFIGURATIONS GLOBAL PROPERTY DEBUG_CONFIGURATIONS)
list(APPEND RELEASE_CONFIGURATIONS ${CMAKE_CONFIGURATION_TYPES})
list(REMOVE_ITEM RELEASE_CONFIGURATIONS ${DEBUG_CONFIGURATIONS})
foreach(RELEASE_CONFIGURATION ${RELEASE_CONFIGURATIONS})
	string(TOUPPER ${RELEASE_CONFIGURATION} RELEASE_CONFIGURATION)
	target_compile_definitions(fs2_open PRIVATE $<$<CONFIG:${RELEASE_CONFIGURATION}>:NDEBUG;${fs2_open_DEFINES}>)
	string(REGEX REPLACE "_" "-" RELEASE_SUFFIX ${RELEASE_CONFIGURATION})
	string(REGEX REPLACE "RELEASE" "" RELEASE_SUFFIX ${RELEASE_SUFFIX})
	set_target_properties(fs2_open PROPERTIES OUTPUT_NAME_${RELEASE_CONFIGURATION} "fs2_open_${VERSION_STRING}${RELEASE_SUFFIX}")
endforeach(RELEASE_CONFIGURATION ${RELEASE_CONFIGURATIONS})
foreach(DEBUG_CONFIGURATION ${DEBUG_CONFIGURATIONS})
	string(TOUPPER ${DEBUG_CONFIGURATION} DEBUG_CONFIGURATION)
	string(REGEX REPLACE "_" "-" DEBUG_SUFFIX ${DEBUG_CONFIGURATION})
	target_compile_definitions(fs2_open PRIVATE $<$<CONFIG:${DEBUG_CONFIGURATION}>:_DEBUG;${fs2_open_DEFINES}>)
	set_target_properties(fs2_open PROPERTIES OUTPUT_NAME_${DEBUG_CONFIGURATION} "fs2_open_${VERSION_STRING}-${DEBUG_SUFFIX}")
endforeach(DEBUG_CONFIGURATION ${DEBUG_CONFIGURATIONS})
if(MSVC)
	foreach(DEBUG_CONFIGURATION ${DEBUG_CONFIGURATIONS})
		target_compile_definitions(fs2_open PRIVATE $<$<CONFIG:${DEBUG_CONFIGURATION}>:_DEBUG;PDB_DEBUGGING=1;_HAS_ITERATOR_DEBUGGING=0;${fred2_DEFINES}>)
	endforeach(DEBUG_CONFIGURATION ${DEBUG_CONFIGURATIONS})
endif(MSVC)
